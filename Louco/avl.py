# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _avl
else:
    import _avl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class bancodedados(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    projeto = property(_avl.bancodedados_projeto_get, _avl.bancodedados_projeto_set)
    classe = property(_avl.bancodedados_classe_get, _avl.bancodedados_classe_set)
    email = property(_avl.bancodedados_email_get, _avl.bancodedados_email_set)
    telefone = property(_avl.bancodedados_telefone_get, _avl.bancodedados_telefone_set)
    ferramentas = property(_avl.bancodedados_ferramentas_get, _avl.bancodedados_ferramentas_set)
    descricao = property(_avl.bancodedados_descricao_get, _avl.bancodedados_descricao_set)
    finalizado = property(_avl.bancodedados_finalizado_get, _avl.bancodedados_finalizado_set)
    altura = property(_avl.bancodedados_altura_get, _avl.bancodedados_altura_set)
    tamanho = property(_avl.bancodedados_tamanho_get, _avl.bancodedados_tamanho_set)
    esquerda = property(_avl.bancodedados_esquerda_get, _avl.bancodedados_esquerda_set)
    direita = property(_avl.bancodedados_direita_get, _avl.bancodedados_direita_set)

    def __init__(self):
        _avl.bancodedados_swiginit(self, _avl.new_bancodedados())
    __swig_destroy__ = _avl.delete_bancodedados

# Register bancodedados in _avl:
_avl.bancodedados_swigregister(bancodedados)


def createTree():
    return _avl.createTree()

def montar_struct(root):
    return _avl.montar_struct(root)

def addprojeto(root, projeto, email, telefone, finalizado, ferramentas, descricao, classe):
    return _avl.addprojeto(root, projeto, email, telefone, finalizado, ferramentas, descricao, classe)

def findproject(root, projeto):
    return _avl.findproject(root, projeto)

def printatodosprojetos(root):
    return _avl.printatodosprojetos(root)

def escrever(root):
    return _avl.escrever(root)

def criaprojeto(projeto, email, telefone, finalizado, ferramentas, descricao, classe):
    return _avl.criaprojeto(projeto, email, telefone, finalizado, ferramentas, descricao, classe)

def printaprojeto(root):
    return _avl.printaprojeto(root)

def SRotLeft(root):
    return _avl.SRotLeft(root)

def SRotRight(root):
    return _avl.SRotRight(root)

def DRotLeft(root):
    return _avl.DRotLeft(root)

def DRotRight(root):
    return _avl.DRotRight(root)

def getaltura(node):
    return _avl.getaltura(node)

def gettamanho(node):
    return _avl.gettamanho(node)

def max(altura1, altura2):
    return _avl.max(altura1, altura2)

def updateAltura(node):
    return _avl.updateAltura(node)

def updatetamanho(node):
    return _avl.updatetamanho(node)

def recriarNo(noAntigo):
    return _avl.recriarNo(noAntigo)

def escreve(root):
    return _avl.escreve(root)

def isstrbigger(novoprojeto, projeto):
    return _avl.isstrbigger(novoprojeto, projeto)

def isequal(procurado, projeto):
    return _avl.isequal(procurado, projeto)
class list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_avl.list_index_get, _avl.list_index_set)
    next = property(_avl.list_next_get, _avl.list_next_set)

    def __init__(self):
        _avl.list_swiginit(self, _avl.new_list())
    __swig_destroy__ = _avl.delete_list

# Register list in _avl:
_avl.list_swigregister(list)


def createList():
    return _avl.createList()

def addList(head, projeto):
    return _avl.addList(head, projeto)

def printl(head):
    return _avl.printl(head)

def makelist(root, head):
    return _avl.makelist(root, head)

def next(head):
    return _avl.next(head)

def cpy(head):
    return _avl.cpy(head)

def lfree(end):
    return _avl.lfree(end)


